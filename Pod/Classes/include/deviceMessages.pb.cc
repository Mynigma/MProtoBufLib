// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deviceMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deviceMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mynigma {

namespace {

const ::google::protobuf::Descriptor* deviceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  deviceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* deviceDiscoveryPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  deviceDiscoveryPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* confirmConnectionMessagePayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  confirmConnectionMessagePayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* announceInfoMessagePayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  announceInfoMessagePayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* digestInfoPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  digestInfoPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* digestInfoPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  digestInfoPart_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_deviceMessages_2eproto() {
  protobuf_AddDesc_deviceMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "deviceMessages.proto");
  GOOGLE_CHECK(file != NULL);
  deviceMessage_descriptor_ = file->message_type(0);
  static const int deviceMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, messagecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, sentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, expirydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, burnafterreading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, threadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, senderuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, recipientuuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, version_),
  };
  deviceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      deviceMessage_descriptor_,
      deviceMessage::default_instance_,
      deviceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(deviceMessage));
  deviceDiscoveryPayload_descriptor_ = file->message_type(1);
  static const int deviceDiscoveryPayload_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, emailadresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, privatekeylabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, osidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, version_),
  };
  deviceDiscoveryPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      deviceDiscoveryPayload_descriptor_,
      deviceDiscoveryPayload::default_instance_,
      deviceDiscoveryPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(deviceDiscoveryPayload));
  confirmConnectionMessagePayload_descriptor_ = file->message_type(2);
  static const int confirmConnectionMessagePayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confirmConnectionMessagePayload, secretkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confirmConnectionMessagePayload, version_),
  };
  confirmConnectionMessagePayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      confirmConnectionMessagePayload_descriptor_,
      confirmConnectionMessagePayload::default_instance_,
      confirmConnectionMessagePayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confirmConnectionMessagePayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confirmConnectionMessagePayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(confirmConnectionMessagePayload));
  announceInfoMessagePayload_descriptor_ = file->message_type(3);
  static const int announceInfoMessagePayload_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, publickeyverdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, publickeyencdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, hashdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, devicediscoverypayloaddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, version_),
  };
  announceInfoMessagePayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      announceInfoMessagePayload_descriptor_,
      announceInfoMessagePayload::default_instance_,
      announceInfoMessagePayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(announceInfoMessagePayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(announceInfoMessagePayload));
  digestInfoPair_descriptor_ = file->message_type(4);
  static const int digestInfoPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPair, initiatordigestdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPair, responderdigestdata_),
  };
  digestInfoPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      digestInfoPair_descriptor_,
      digestInfoPair::default_instance_,
      digestInfoPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(digestInfoPair));
  digestInfoPart_descriptor_ = file->message_type(5);
  static const int digestInfoPart_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPart, publicverkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPart, publicenckeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPart, secretdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPart, deviceuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPart, devicekeylabel_),
  };
  digestInfoPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      digestInfoPart_descriptor_,
      digestInfoPart::default_instance_,
      digestInfoPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(digestInfoPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(digestInfoPart));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_deviceMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    deviceMessage_descriptor_, &deviceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    deviceDiscoveryPayload_descriptor_, &deviceDiscoveryPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    confirmConnectionMessagePayload_descriptor_, &confirmConnectionMessagePayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    announceInfoMessagePayload_descriptor_, &announceInfoMessagePayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    digestInfoPair_descriptor_, &digestInfoPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    digestInfoPart_descriptor_, &digestInfoPart::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_deviceMessages_2eproto() {
  delete deviceMessage::default_instance_;
  delete deviceMessage_reflection_;
  delete deviceDiscoveryPayload::default_instance_;
  delete deviceDiscoveryPayload_reflection_;
  delete confirmConnectionMessagePayload::default_instance_;
  delete confirmConnectionMessagePayload_reflection_;
  delete announceInfoMessagePayload::default_instance_;
  delete announceInfoMessagePayload_reflection_;
  delete digestInfoPair::default_instance_;
  delete digestInfoPair_reflection_;
  delete digestInfoPart::default_instance_;
  delete digestInfoPart_reflection_;
}

void protobuf_AddDesc_deviceMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024deviceMessages.proto\022\007mynigma\"\307\001\n\rdevi"
    "ceMessage\022\026\n\016messageCommand\030\001 \001(\t\022\017\n\007pay"
    "load\030\002 \001(\014\022\020\n\010sentDate\030\003 \001(\003\022\022\n\nexpiryDa"
    "te\030\004 \001(\003\022\030\n\020burnAfterReading\030\005 \001(\010\022\020\n\010th"
    "readID\030\006 \001(\t\022\022\n\nsenderUUID\030\007 \001(\t\022\026\n\016reci"
    "pientUUIDs\030\010 \003(\t\022\017\n\007version\030\t \001(\t\"\232\001\n\026de"
    "viceDiscoveryPayload\022\014\n\004UUID\030\001 \001(\t\022\014\n\004ty"
    "pe\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\025\n\remailAdresses\030"
    "\004 \003(\t\022\030\n\020privateKeyLabels\030\005 \003(\t\022\024\n\014OSIde"
    "ntifier\030\006 \001(\t\022\017\n\007version\030\007 \001(\t\"I\n\037confir"
    "mConnectionMessagePayload\022\025\n\rsecretKeyDa"
    "ta\030\001 \001(\014\022\017\n\007version\030\002 \001(\t\"\251\001\n\032announceIn"
    "foMessagePayload\022\030\n\020publicKeyVerData\030\001 \001"
    "(\014\022\030\n\020publicKeyEncData\030\002 \001(\014\022\020\n\010keyLabel"
    "\030\003 \001(\t\022\020\n\010hashData\030\004 \001(\014\022\"\n\032deviceDiscov"
    "eryPayloadData\030\005 \001(\014\022\017\n\007version\030\006 \001(\t\"|\n"
    "\016digestInfoPair\0224\n\023initiatorDigestData\030\001"
    " \001(\0132\027.mynigma.digestInfoPart\0224\n\023respond"
    "erDigestData\030\002 \001(\0132\027.mynigma.digestInfoP"
    "art\"\204\001\n\016digestInfoPart\022\030\n\020publicVerKeyDa"
    "ta\030\001 \001(\014\022\030\n\020publicEncKeyData\030\002 \001(\014\022\022\n\nse"
    "cretData\030\003 \001(\014\022\022\n\ndeviceUUID\030\004 \001(\t\022\026\n\016de"
    "viceKeyLabel\030\005 \001(\tB(\n\026org.mynigma.protoc"
    ".genB\016DeviceMessages", 940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deviceMessages.proto", &protobuf_RegisterTypes);
  deviceMessage::default_instance_ = new deviceMessage();
  deviceDiscoveryPayload::default_instance_ = new deviceDiscoveryPayload();
  confirmConnectionMessagePayload::default_instance_ = new confirmConnectionMessagePayload();
  announceInfoMessagePayload::default_instance_ = new announceInfoMessagePayload();
  digestInfoPair::default_instance_ = new digestInfoPair();
  digestInfoPart::default_instance_ = new digestInfoPart();
  deviceMessage::default_instance_->InitAsDefaultInstance();
  deviceDiscoveryPayload::default_instance_->InitAsDefaultInstance();
  confirmConnectionMessagePayload::default_instance_->InitAsDefaultInstance();
  announceInfoMessagePayload::default_instance_->InitAsDefaultInstance();
  digestInfoPair::default_instance_->InitAsDefaultInstance();
  digestInfoPart::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_deviceMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_deviceMessages_2eproto {
  StaticDescriptorInitializer_deviceMessages_2eproto() {
    protobuf_AddDesc_deviceMessages_2eproto();
  }
} static_descriptor_initializer_deviceMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int deviceMessage::kMessageCommandFieldNumber;
const int deviceMessage::kPayloadFieldNumber;
const int deviceMessage::kSentDateFieldNumber;
const int deviceMessage::kExpiryDateFieldNumber;
const int deviceMessage::kBurnAfterReadingFieldNumber;
const int deviceMessage::kThreadIDFieldNumber;
const int deviceMessage::kSenderUUIDFieldNumber;
const int deviceMessage::kRecipientUUIDsFieldNumber;
const int deviceMessage::kVersionFieldNumber;
#endif  // !_MSC_VER

deviceMessage::deviceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void deviceMessage::InitAsDefaultInstance() {
}

deviceMessage::deviceMessage(const deviceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void deviceMessage::SharedCtor() {
  _cached_size_ = 0;
  messagecommand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sentdate_ = GOOGLE_LONGLONG(0);
  expirydate_ = GOOGLE_LONGLONG(0);
  burnafterreading_ = false;
  threadid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

deviceMessage::~deviceMessage() {
  SharedDtor();
}

void deviceMessage::SharedDtor() {
  if (messagecommand_ != &::google::protobuf::internal::kEmptyString) {
    delete messagecommand_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (threadid_ != &::google::protobuf::internal::kEmptyString) {
    delete threadid_;
  }
  if (senderuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete senderuuid_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void deviceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deviceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return deviceMessage_descriptor_;
}

const deviceMessage& deviceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deviceMessages_2eproto();
  return *default_instance_;
}

deviceMessage* deviceMessage::default_instance_ = NULL;

deviceMessage* deviceMessage::New() const {
  return new deviceMessage;
}

void deviceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messagecommand()) {
      if (messagecommand_ != &::google::protobuf::internal::kEmptyString) {
        messagecommand_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    sentdate_ = GOOGLE_LONGLONG(0);
    expirydate_ = GOOGLE_LONGLONG(0);
    burnafterreading_ = false;
    if (has_threadid()) {
      if (threadid_ != &::google::protobuf::internal::kEmptyString) {
        threadid_->clear();
      }
    }
    if (has_senderuuid()) {
      if (senderuuid_ != &::google::protobuf::internal::kEmptyString) {
        senderuuid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  recipientuuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool deviceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string messageCommand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagecommand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagecommand().data(), this->messagecommand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sentDate;
        break;
      }

      // optional int64 sentDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sentdate_)));
          set_has_sentdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expiryDate;
        break;
      }

      // optional int64 expiryDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiryDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expirydate_)));
          set_has_expirydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_burnAfterReading;
        break;
      }

      // optional bool burnAfterReading = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burnAfterReading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &burnafterreading_)));
          set_has_burnafterreading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_threadID;
        break;
      }

      // optional string threadID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_threadID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_threadid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->threadid().data(), this->threadid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_senderUUID;
        break;
      }

      // optional string senderUUID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->senderuuid().data(), this->senderuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_recipientUUIDs;
        break;
      }

      // repeated string recipientUUIDs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipientUUIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipientuuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recipientuuids(this->recipientuuids_size() - 1).data(),
            this->recipientuuids(this->recipientuuids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_recipientUUIDs;
        if (input->ExpectTag(74)) goto parse_version;
        break;
      }

      // optional string version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void deviceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string messageCommand = 1;
  if (has_messagecommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagecommand().data(), this->messagecommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messagecommand(), output);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }

  // optional int64 sentDate = 3;
  if (has_sentdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sentdate(), output);
  }

  // optional int64 expiryDate = 4;
  if (has_expirydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expirydate(), output);
  }

  // optional bool burnAfterReading = 5;
  if (has_burnafterreading()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->burnafterreading(), output);
  }

  // optional string threadID = 6;
  if (has_threadid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->threadid().data(), this->threadid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->threadid(), output);
  }

  // optional string senderUUID = 7;
  if (has_senderuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderuuid().data(), this->senderuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->senderuuid(), output);
  }

  // repeated string recipientUUIDs = 8;
  for (int i = 0; i < this->recipientuuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recipientuuids(i).data(), this->recipientuuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->recipientuuids(i), output);
  }

  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* deviceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string messageCommand = 1;
  if (has_messagecommand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagecommand().data(), this->messagecommand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagecommand(), target);
  }

  // optional bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // optional int64 sentDate = 3;
  if (has_sentdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sentdate(), target);
  }

  // optional int64 expiryDate = 4;
  if (has_expirydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expirydate(), target);
  }

  // optional bool burnAfterReading = 5;
  if (has_burnafterreading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->burnafterreading(), target);
  }

  // optional string threadID = 6;
  if (has_threadid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->threadid().data(), this->threadid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->threadid(), target);
  }

  // optional string senderUUID = 7;
  if (has_senderuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderuuid().data(), this->senderuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->senderuuid(), target);
  }

  // repeated string recipientUUIDs = 8;
  for (int i = 0; i < this->recipientuuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recipientuuids(i).data(), this->recipientuuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->recipientuuids(i), target);
  }

  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int deviceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string messageCommand = 1;
    if (has_messagecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagecommand());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional int64 sentDate = 3;
    if (has_sentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sentdate());
    }

    // optional int64 expiryDate = 4;
    if (has_expirydate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expirydate());
    }

    // optional bool burnAfterReading = 5;
    if (has_burnafterreading()) {
      total_size += 1 + 1;
    }

    // optional string threadID = 6;
    if (has_threadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->threadid());
    }

    // optional string senderUUID = 7;
    if (has_senderuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderuuid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string version = 9;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated string recipientUUIDs = 8;
  total_size += 1 * this->recipientuuids_size();
  for (int i = 0; i < this->recipientuuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipientuuids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deviceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const deviceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const deviceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void deviceMessage::MergeFrom(const deviceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipientuuids_.MergeFrom(from.recipientuuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagecommand()) {
      set_messagecommand(from.messagecommand());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_sentdate()) {
      set_sentdate(from.sentdate());
    }
    if (from.has_expirydate()) {
      set_expirydate(from.expirydate());
    }
    if (from.has_burnafterreading()) {
      set_burnafterreading(from.burnafterreading());
    }
    if (from.has_threadid()) {
      set_threadid(from.threadid());
    }
    if (from.has_senderuuid()) {
      set_senderuuid(from.senderuuid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void deviceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deviceMessage::CopyFrom(const deviceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceMessage::IsInitialized() const {

  return true;
}

void deviceMessage::Swap(deviceMessage* other) {
  if (other != this) {
    std::swap(messagecommand_, other->messagecommand_);
    std::swap(payload_, other->payload_);
    std::swap(sentdate_, other->sentdate_);
    std::swap(expirydate_, other->expirydate_);
    std::swap(burnafterreading_, other->burnafterreading_);
    std::swap(threadid_, other->threadid_);
    std::swap(senderuuid_, other->senderuuid_);
    recipientuuids_.Swap(&other->recipientuuids_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata deviceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = deviceMessage_descriptor_;
  metadata.reflection = deviceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int deviceDiscoveryPayload::kUUIDFieldNumber;
const int deviceDiscoveryPayload::kTypeFieldNumber;
const int deviceDiscoveryPayload::kNameFieldNumber;
const int deviceDiscoveryPayload::kEmailAdressesFieldNumber;
const int deviceDiscoveryPayload::kPrivateKeyLabelsFieldNumber;
const int deviceDiscoveryPayload::kOSIdentifierFieldNumber;
const int deviceDiscoveryPayload::kVersionFieldNumber;
#endif  // !_MSC_VER

deviceDiscoveryPayload::deviceDiscoveryPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void deviceDiscoveryPayload::InitAsDefaultInstance() {
}

deviceDiscoveryPayload::deviceDiscoveryPayload(const deviceDiscoveryPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void deviceDiscoveryPayload::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  osidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

deviceDiscoveryPayload::~deviceDiscoveryPayload() {
  SharedDtor();
}

void deviceDiscoveryPayload::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (osidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete osidentifier_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void deviceDiscoveryPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deviceDiscoveryPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return deviceDiscoveryPayload_descriptor_;
}

const deviceDiscoveryPayload& deviceDiscoveryPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deviceMessages_2eproto();
  return *default_instance_;
}

deviceDiscoveryPayload* deviceDiscoveryPayload::default_instance_ = NULL;

deviceDiscoveryPayload* deviceDiscoveryPayload::New() const {
  return new deviceDiscoveryPayload;
}

void deviceDiscoveryPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_osidentifier()) {
      if (osidentifier_ != &::google::protobuf::internal::kEmptyString) {
        osidentifier_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  emailadresses_.Clear();
  privatekeylabels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool deviceDiscoveryPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_emailAdresses;
        break;
      }

      // repeated string emailAdresses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailAdresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_emailadresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailadresses(this->emailadresses_size() - 1).data(),
            this->emailadresses(this->emailadresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_emailAdresses;
        if (input->ExpectTag(42)) goto parse_privateKeyLabels;
        break;
      }

      // repeated string privateKeyLabels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privateKeyLabels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_privatekeylabels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->privatekeylabels(this->privatekeylabels_size() - 1).data(),
            this->privatekeylabels(this->privatekeylabels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_privateKeyLabels;
        if (input->ExpectTag(50)) goto parse_OSIdentifier;
        break;
      }

      // optional string OSIdentifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OSIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osidentifier().data(), this->osidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }

      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void deviceDiscoveryPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UUID = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated string emailAdresses = 4;
  for (int i = 0; i < this->emailadresses_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->emailadresses(i).data(), this->emailadresses(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->emailadresses(i), output);
  }

  // repeated string privateKeyLabels = 5;
  for (int i = 0; i < this->privatekeylabels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->privatekeylabels(i).data(), this->privatekeylabels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->privatekeylabels(i), output);
  }

  // optional string OSIdentifier = 6;
  if (has_osidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osidentifier().data(), this->osidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->osidentifier(), output);
  }

  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* deviceDiscoveryPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UUID = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated string emailAdresses = 4;
  for (int i = 0; i < this->emailadresses_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailadresses(i).data(), this->emailadresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->emailadresses(i), target);
  }

  // repeated string privateKeyLabels = 5;
  for (int i = 0; i < this->privatekeylabels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->privatekeylabels(i).data(), this->privatekeylabels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->privatekeylabels(i), target);
  }

  // optional string OSIdentifier = 6;
  if (has_osidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osidentifier().data(), this->osidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->osidentifier(), target);
  }

  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int deviceDiscoveryPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UUID = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string OSIdentifier = 6;
    if (has_osidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osidentifier());
    }

    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated string emailAdresses = 4;
  total_size += 1 * this->emailadresses_size();
  for (int i = 0; i < this->emailadresses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->emailadresses(i));
  }

  // repeated string privateKeyLabels = 5;
  total_size += 1 * this->privatekeylabels_size();
  for (int i = 0; i < this->privatekeylabels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->privatekeylabels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deviceDiscoveryPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const deviceDiscoveryPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const deviceDiscoveryPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void deviceDiscoveryPayload::MergeFrom(const deviceDiscoveryPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  emailadresses_.MergeFrom(from.emailadresses_);
  privatekeylabels_.MergeFrom(from.privatekeylabels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_osidentifier()) {
      set_osidentifier(from.osidentifier());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void deviceDiscoveryPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deviceDiscoveryPayload::CopyFrom(const deviceDiscoveryPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceDiscoveryPayload::IsInitialized() const {

  return true;
}

void deviceDiscoveryPayload::Swap(deviceDiscoveryPayload* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    emailadresses_.Swap(&other->emailadresses_);
    privatekeylabels_.Swap(&other->privatekeylabels_);
    std::swap(osidentifier_, other->osidentifier_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata deviceDiscoveryPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = deviceDiscoveryPayload_descriptor_;
  metadata.reflection = deviceDiscoveryPayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int confirmConnectionMessagePayload::kSecretKeyDataFieldNumber;
const int confirmConnectionMessagePayload::kVersionFieldNumber;
#endif  // !_MSC_VER

confirmConnectionMessagePayload::confirmConnectionMessagePayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void confirmConnectionMessagePayload::InitAsDefaultInstance() {
}

confirmConnectionMessagePayload::confirmConnectionMessagePayload(const confirmConnectionMessagePayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void confirmConnectionMessagePayload::SharedCtor() {
  _cached_size_ = 0;
  secretkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

confirmConnectionMessagePayload::~confirmConnectionMessagePayload() {
  SharedDtor();
}

void confirmConnectionMessagePayload::SharedDtor() {
  if (secretkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete secretkeydata_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void confirmConnectionMessagePayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* confirmConnectionMessagePayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return confirmConnectionMessagePayload_descriptor_;
}

const confirmConnectionMessagePayload& confirmConnectionMessagePayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deviceMessages_2eproto();
  return *default_instance_;
}

confirmConnectionMessagePayload* confirmConnectionMessagePayload::default_instance_ = NULL;

confirmConnectionMessagePayload* confirmConnectionMessagePayload::New() const {
  return new confirmConnectionMessagePayload;
}

void confirmConnectionMessagePayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secretkeydata()) {
      if (secretkeydata_ != &::google::protobuf::internal::kEmptyString) {
        secretkeydata_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool confirmConnectionMessagePayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes secretKeyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secretkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void confirmConnectionMessagePayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes secretKeyData = 1;
  if (has_secretkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->secretkeydata(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* confirmConnectionMessagePayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes secretKeyData = 1;
  if (has_secretkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->secretkeydata(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int confirmConnectionMessagePayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes secretKeyData = 1;
    if (has_secretkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secretkeydata());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void confirmConnectionMessagePayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const confirmConnectionMessagePayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const confirmConnectionMessagePayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void confirmConnectionMessagePayload::MergeFrom(const confirmConnectionMessagePayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secretkeydata()) {
      set_secretkeydata(from.secretkeydata());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void confirmConnectionMessagePayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void confirmConnectionMessagePayload::CopyFrom(const confirmConnectionMessagePayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool confirmConnectionMessagePayload::IsInitialized() const {

  return true;
}

void confirmConnectionMessagePayload::Swap(confirmConnectionMessagePayload* other) {
  if (other != this) {
    std::swap(secretkeydata_, other->secretkeydata_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata confirmConnectionMessagePayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = confirmConnectionMessagePayload_descriptor_;
  metadata.reflection = confirmConnectionMessagePayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int announceInfoMessagePayload::kPublicKeyVerDataFieldNumber;
const int announceInfoMessagePayload::kPublicKeyEncDataFieldNumber;
const int announceInfoMessagePayload::kKeyLabelFieldNumber;
const int announceInfoMessagePayload::kHashDataFieldNumber;
const int announceInfoMessagePayload::kDeviceDiscoveryPayloadDataFieldNumber;
const int announceInfoMessagePayload::kVersionFieldNumber;
#endif  // !_MSC_VER

announceInfoMessagePayload::announceInfoMessagePayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void announceInfoMessagePayload::InitAsDefaultInstance() {
}

announceInfoMessagePayload::announceInfoMessagePayload(const announceInfoMessagePayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void announceInfoMessagePayload::SharedCtor() {
  _cached_size_ = 0;
  publickeyverdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publickeyencdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hashdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicediscoverypayloaddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

announceInfoMessagePayload::~announceInfoMessagePayload() {
  SharedDtor();
}

void announceInfoMessagePayload::SharedDtor() {
  if (publickeyverdata_ != &::google::protobuf::internal::kEmptyString) {
    delete publickeyverdata_;
  }
  if (publickeyencdata_ != &::google::protobuf::internal::kEmptyString) {
    delete publickeyencdata_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (hashdata_ != &::google::protobuf::internal::kEmptyString) {
    delete hashdata_;
  }
  if (devicediscoverypayloaddata_ != &::google::protobuf::internal::kEmptyString) {
    delete devicediscoverypayloaddata_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void announceInfoMessagePayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* announceInfoMessagePayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return announceInfoMessagePayload_descriptor_;
}

const announceInfoMessagePayload& announceInfoMessagePayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deviceMessages_2eproto();
  return *default_instance_;
}

announceInfoMessagePayload* announceInfoMessagePayload::default_instance_ = NULL;

announceInfoMessagePayload* announceInfoMessagePayload::New() const {
  return new announceInfoMessagePayload;
}

void announceInfoMessagePayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_publickeyverdata()) {
      if (publickeyverdata_ != &::google::protobuf::internal::kEmptyString) {
        publickeyverdata_->clear();
      }
    }
    if (has_publickeyencdata()) {
      if (publickeyencdata_ != &::google::protobuf::internal::kEmptyString) {
        publickeyencdata_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    if (has_hashdata()) {
      if (hashdata_ != &::google::protobuf::internal::kEmptyString) {
        hashdata_->clear();
      }
    }
    if (has_devicediscoverypayloaddata()) {
      if (devicediscoverypayloaddata_ != &::google::protobuf::internal::kEmptyString) {
        devicediscoverypayloaddata_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool announceInfoMessagePayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes publicKeyVerData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publickeyverdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publicKeyEncData;
        break;
      }

      // optional bytes publicKeyEncData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publicKeyEncData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publickeyencdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keyLabel;
        break;
      }

      // optional string keyLabel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hashData;
        break;
      }

      // optional bytes hashData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hashData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hashdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceDiscoveryPayloadData;
        break;
      }

      // optional bytes deviceDiscoveryPayloadData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceDiscoveryPayloadData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicediscoverypayloaddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void announceInfoMessagePayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes publicKeyVerData = 1;
  if (has_publickeyverdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->publickeyverdata(), output);
  }

  // optional bytes publicKeyEncData = 2;
  if (has_publickeyencdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->publickeyencdata(), output);
  }

  // optional string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keylabel(), output);
  }

  // optional bytes hashData = 4;
  if (has_hashdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->hashdata(), output);
  }

  // optional bytes deviceDiscoveryPayloadData = 5;
  if (has_devicediscoverypayloaddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->devicediscoverypayloaddata(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* announceInfoMessagePayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes publicKeyVerData = 1;
  if (has_publickeyverdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->publickeyverdata(), target);
  }

  // optional bytes publicKeyEncData = 2;
  if (has_publickeyencdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->publickeyencdata(), target);
  }

  // optional string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keylabel(), target);
  }

  // optional bytes hashData = 4;
  if (has_hashdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hashdata(), target);
  }

  // optional bytes deviceDiscoveryPayloadData = 5;
  if (has_devicediscoverypayloaddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->devicediscoverypayloaddata(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int announceInfoMessagePayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes publicKeyVerData = 1;
    if (has_publickeyverdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publickeyverdata());
    }

    // optional bytes publicKeyEncData = 2;
    if (has_publickeyencdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publickeyencdata());
    }

    // optional string keyLabel = 3;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional bytes hashData = 4;
    if (has_hashdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hashdata());
    }

    // optional bytes deviceDiscoveryPayloadData = 5;
    if (has_devicediscoverypayloaddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicediscoverypayloaddata());
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void announceInfoMessagePayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const announceInfoMessagePayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const announceInfoMessagePayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void announceInfoMessagePayload::MergeFrom(const announceInfoMessagePayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publickeyverdata()) {
      set_publickeyverdata(from.publickeyverdata());
    }
    if (from.has_publickeyencdata()) {
      set_publickeyencdata(from.publickeyencdata());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_hashdata()) {
      set_hashdata(from.hashdata());
    }
    if (from.has_devicediscoverypayloaddata()) {
      set_devicediscoverypayloaddata(from.devicediscoverypayloaddata());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void announceInfoMessagePayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void announceInfoMessagePayload::CopyFrom(const announceInfoMessagePayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool announceInfoMessagePayload::IsInitialized() const {

  return true;
}

void announceInfoMessagePayload::Swap(announceInfoMessagePayload* other) {
  if (other != this) {
    std::swap(publickeyverdata_, other->publickeyverdata_);
    std::swap(publickeyencdata_, other->publickeyencdata_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(hashdata_, other->hashdata_);
    std::swap(devicediscoverypayloaddata_, other->devicediscoverypayloaddata_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata announceInfoMessagePayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = announceInfoMessagePayload_descriptor_;
  metadata.reflection = announceInfoMessagePayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int digestInfoPair::kInitiatorDigestDataFieldNumber;
const int digestInfoPair::kResponderDigestDataFieldNumber;
#endif  // !_MSC_VER

digestInfoPair::digestInfoPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void digestInfoPair::InitAsDefaultInstance() {
  initiatordigestdata_ = const_cast< ::mynigma::digestInfoPart*>(&::mynigma::digestInfoPart::default_instance());
  responderdigestdata_ = const_cast< ::mynigma::digestInfoPart*>(&::mynigma::digestInfoPart::default_instance());
}

digestInfoPair::digestInfoPair(const digestInfoPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void digestInfoPair::SharedCtor() {
  _cached_size_ = 0;
  initiatordigestdata_ = NULL;
  responderdigestdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

digestInfoPair::~digestInfoPair() {
  SharedDtor();
}

void digestInfoPair::SharedDtor() {
  if (this != default_instance_) {
    delete initiatordigestdata_;
    delete responderdigestdata_;
  }
}

void digestInfoPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* digestInfoPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return digestInfoPair_descriptor_;
}

const digestInfoPair& digestInfoPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deviceMessages_2eproto();
  return *default_instance_;
}

digestInfoPair* digestInfoPair::default_instance_ = NULL;

digestInfoPair* digestInfoPair::New() const {
  return new digestInfoPair;
}

void digestInfoPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_initiatordigestdata()) {
      if (initiatordigestdata_ != NULL) initiatordigestdata_->::mynigma::digestInfoPart::Clear();
    }
    if (has_responderdigestdata()) {
      if (responderdigestdata_ != NULL) responderdigestdata_->::mynigma::digestInfoPart::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool digestInfoPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mynigma.digestInfoPart initiatorDigestData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initiatordigestdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_responderDigestData;
        break;
      }

      // optional .mynigma.digestInfoPart responderDigestData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responderDigestData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responderdigestdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void digestInfoPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mynigma.digestInfoPart initiatorDigestData = 1;
  if (has_initiatordigestdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->initiatordigestdata(), output);
  }

  // optional .mynigma.digestInfoPart responderDigestData = 2;
  if (has_responderdigestdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responderdigestdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* digestInfoPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mynigma.digestInfoPart initiatorDigestData = 1;
  if (has_initiatordigestdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->initiatordigestdata(), target);
  }

  // optional .mynigma.digestInfoPart responderDigestData = 2;
  if (has_responderdigestdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->responderdigestdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int digestInfoPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mynigma.digestInfoPart initiatorDigestData = 1;
    if (has_initiatordigestdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initiatordigestdata());
    }

    // optional .mynigma.digestInfoPart responderDigestData = 2;
    if (has_responderdigestdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responderdigestdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void digestInfoPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const digestInfoPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const digestInfoPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void digestInfoPair::MergeFrom(const digestInfoPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initiatordigestdata()) {
      mutable_initiatordigestdata()->::mynigma::digestInfoPart::MergeFrom(from.initiatordigestdata());
    }
    if (from.has_responderdigestdata()) {
      mutable_responderdigestdata()->::mynigma::digestInfoPart::MergeFrom(from.responderdigestdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void digestInfoPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void digestInfoPair::CopyFrom(const digestInfoPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool digestInfoPair::IsInitialized() const {

  return true;
}

void digestInfoPair::Swap(digestInfoPair* other) {
  if (other != this) {
    std::swap(initiatordigestdata_, other->initiatordigestdata_);
    std::swap(responderdigestdata_, other->responderdigestdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata digestInfoPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = digestInfoPair_descriptor_;
  metadata.reflection = digestInfoPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int digestInfoPart::kPublicVerKeyDataFieldNumber;
const int digestInfoPart::kPublicEncKeyDataFieldNumber;
const int digestInfoPart::kSecretDataFieldNumber;
const int digestInfoPart::kDeviceUUIDFieldNumber;
const int digestInfoPart::kDeviceKeyLabelFieldNumber;
#endif  // !_MSC_VER

digestInfoPart::digestInfoPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void digestInfoPart::InitAsDefaultInstance() {
}

digestInfoPart::digestInfoPart(const digestInfoPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void digestInfoPart::SharedCtor() {
  _cached_size_ = 0;
  publicverkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publicenckeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secretdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicekeylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

digestInfoPart::~digestInfoPart() {
  SharedDtor();
}

void digestInfoPart::SharedDtor() {
  if (publicverkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete publicverkeydata_;
  }
  if (publicenckeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete publicenckeydata_;
  }
  if (secretdata_ != &::google::protobuf::internal::kEmptyString) {
    delete secretdata_;
  }
  if (deviceuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceuuid_;
  }
  if (devicekeylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete devicekeylabel_;
  }
  if (this != default_instance_) {
  }
}

void digestInfoPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* digestInfoPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return digestInfoPart_descriptor_;
}

const digestInfoPart& digestInfoPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deviceMessages_2eproto();
  return *default_instance_;
}

digestInfoPart* digestInfoPart::default_instance_ = NULL;

digestInfoPart* digestInfoPart::New() const {
  return new digestInfoPart;
}

void digestInfoPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_publicverkeydata()) {
      if (publicverkeydata_ != &::google::protobuf::internal::kEmptyString) {
        publicverkeydata_->clear();
      }
    }
    if (has_publicenckeydata()) {
      if (publicenckeydata_ != &::google::protobuf::internal::kEmptyString) {
        publicenckeydata_->clear();
      }
    }
    if (has_secretdata()) {
      if (secretdata_ != &::google::protobuf::internal::kEmptyString) {
        secretdata_->clear();
      }
    }
    if (has_deviceuuid()) {
      if (deviceuuid_ != &::google::protobuf::internal::kEmptyString) {
        deviceuuid_->clear();
      }
    }
    if (has_devicekeylabel()) {
      if (devicekeylabel_ != &::google::protobuf::internal::kEmptyString) {
        devicekeylabel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool digestInfoPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes publicVerKeyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publicverkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publicEncKeyData;
        break;
      }

      // optional bytes publicEncKeyData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publicEncKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publicenckeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secretData;
        break;
      }

      // optional bytes secretData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secretData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secretdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceUUID;
        break;
      }

      // optional string deviceUUID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceuuid().data(), this->deviceuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceKeyLabel;
        break;
      }

      // optional string deviceKeyLabel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceKeyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicekeylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicekeylabel().data(), this->devicekeylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void digestInfoPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes publicVerKeyData = 1;
  if (has_publicverkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->publicverkeydata(), output);
  }

  // optional bytes publicEncKeyData = 2;
  if (has_publicenckeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->publicenckeydata(), output);
  }

  // optional bytes secretData = 3;
  if (has_secretdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->secretdata(), output);
  }

  // optional string deviceUUID = 4;
  if (has_deviceuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuuid().data(), this->deviceuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deviceuuid(), output);
  }

  // optional string deviceKeyLabel = 5;
  if (has_devicekeylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicekeylabel().data(), this->devicekeylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->devicekeylabel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* digestInfoPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes publicVerKeyData = 1;
  if (has_publicverkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->publicverkeydata(), target);
  }

  // optional bytes publicEncKeyData = 2;
  if (has_publicenckeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->publicenckeydata(), target);
  }

  // optional bytes secretData = 3;
  if (has_secretdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->secretdata(), target);
  }

  // optional string deviceUUID = 4;
  if (has_deviceuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceuuid().data(), this->deviceuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceuuid(), target);
  }

  // optional string deviceKeyLabel = 5;
  if (has_devicekeylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicekeylabel().data(), this->devicekeylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicekeylabel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int digestInfoPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes publicVerKeyData = 1;
    if (has_publicverkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publicverkeydata());
    }

    // optional bytes publicEncKeyData = 2;
    if (has_publicenckeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publicenckeydata());
    }

    // optional bytes secretData = 3;
    if (has_secretdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secretdata());
    }

    // optional string deviceUUID = 4;
    if (has_deviceuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceuuid());
    }

    // optional string deviceKeyLabel = 5;
    if (has_devicekeylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicekeylabel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void digestInfoPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const digestInfoPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const digestInfoPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void digestInfoPart::MergeFrom(const digestInfoPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publicverkeydata()) {
      set_publicverkeydata(from.publicverkeydata());
    }
    if (from.has_publicenckeydata()) {
      set_publicenckeydata(from.publicenckeydata());
    }
    if (from.has_secretdata()) {
      set_secretdata(from.secretdata());
    }
    if (from.has_deviceuuid()) {
      set_deviceuuid(from.deviceuuid());
    }
    if (from.has_devicekeylabel()) {
      set_devicekeylabel(from.devicekeylabel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void digestInfoPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void digestInfoPart::CopyFrom(const digestInfoPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool digestInfoPart::IsInitialized() const {

  return true;
}

void digestInfoPart::Swap(digestInfoPart* other) {
  if (other != this) {
    std::swap(publicverkeydata_, other->publicverkeydata_);
    std::swap(publicenckeydata_, other->publicenckeydata_);
    std::swap(secretdata_, other->secretdata_);
    std::swap(deviceuuid_, other->deviceuuid_);
    std::swap(devicekeylabel_, other->devicekeylabel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata digestInfoPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = digestInfoPart_descriptor_;
  metadata.reflection = digestInfoPart_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mynigma

// @@protoc_insertion_point(global_scope)
