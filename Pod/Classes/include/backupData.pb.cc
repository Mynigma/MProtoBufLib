// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backupData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "backupData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mynigma {

namespace {

const ::google::protobuf::Descriptor* privateKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  privateKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* publicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  publicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* keyExpectation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  keyExpectation_reflection_ = NULL;
const ::google::protobuf::Descriptor* plainBackupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plainBackupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* backupPasswordFileWrapper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  backupPasswordFileWrapper_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_backupData_2eproto() {
  protobuf_AddDesc_backupData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "backupData.proto");
  GOOGLE_CHECK(file != NULL);
  privateKey_descriptor_ = file->message_type(0);
  static const int privateKey_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, dateanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, currentkeyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, keyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, keyfordeviceswithuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, datescurrentkeysanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, decrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, signkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, iscompromised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, introduceskeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, isintroducedbykeys_),
  };
  privateKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      privateKey_descriptor_,
      privateKey::default_instance_,
      privateKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(privateKey));
  publicKey_descriptor_ = file->message_type(1);
  static const int publicKey_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, dateanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, currentkeyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, keyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, keyfordeviceswithuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, datescurrentkeysanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, iscompromised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, introduceskeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, isintroducedbykeys_),
  };
  publicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      publicKey_descriptor_,
      publicKey::default_instance_,
      publicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(publicKey));
  keyExpectation_descriptor_ = file->message_type(2);
  static const int keyExpectation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, fromaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, toaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, datecreated_),
  };
  keyExpectation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      keyExpectation_descriptor_,
      keyExpectation::default_instance_,
      keyExpectation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(keyExpectation));
  plainBackupData_descriptor_ = file->message_type(3);
  static const int plainBackupData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plainBackupData, privkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plainBackupData, pubkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plainBackupData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plainBackupData, keyexpectations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plainBackupData, integritycheckstring_),
  };
  plainBackupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plainBackupData_descriptor_,
      plainBackupData::default_instance_,
      plainBackupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plainBackupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plainBackupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plainBackupData));
  backupPasswordFileWrapper_descriptor_ = file->message_type(4);
  static const int backupPasswordFileWrapper_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupPasswordFileWrapper, payloaddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupPasswordFileWrapper, haspassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupPasswordFileWrapper, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupPasswordFileWrapper, passwordsalt_),
  };
  backupPasswordFileWrapper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      backupPasswordFileWrapper_descriptor_,
      backupPasswordFileWrapper::default_instance_,
      backupPasswordFileWrapper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupPasswordFileWrapper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupPasswordFileWrapper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(backupPasswordFileWrapper));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_backupData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    privateKey_descriptor_, &privateKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    publicKey_descriptor_, &publicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    keyExpectation_descriptor_, &keyExpectation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plainBackupData_descriptor_, &plainBackupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    backupPasswordFileWrapper_descriptor_, &backupPasswordFileWrapper::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_backupData_2eproto() {
  delete privateKey::default_instance_;
  delete privateKey_reflection_;
  delete publicKey::default_instance_;
  delete publicKey_reflection_;
  delete keyExpectation::default_instance_;
  delete keyExpectation_reflection_;
  delete plainBackupData::default_instance_;
  delete plainBackupData_reflection_;
  delete backupPasswordFileWrapper::default_instance_;
  delete backupPasswordFileWrapper_reflection_;
}

void protobuf_AddDesc_backupData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020backupData.proto\022\007mynigma\"\354\002\n\nprivateK"
    "ey\022\020\n\010keyLabel\030\001 \001(\t\022\024\n\014dateAnchored\030\002 \001"
    "(\003\022\017\n\007version\030\003 \001(\t\022\023\n\013encrKeyData\030\004 \001(\014"
    "\022\022\n\nverKeyData\030\005 \001(\014\022\033\n\023currentKeyForEma"
    "ils\030\006 \003(\t\022\024\n\014keyForEmails\030\007 \003(\t\022\035\n\025keyFo"
    "rDevicesWithUUID\030\010 \003(\t\022 \n\030datesCurrentKe"
    "ysAnchored\030\017 \003(\003\022\023\n\013decrKeyData\030\t \001(\014\022\023\n"
    "\013signKeyData\030\n \001(\014\022\025\n\risCompromised\030\013 \001("
    "\010\022\023\n\013dateCreated\030\014 \001(\003\022\026\n\016introducesKeys"
    "\030\r \003(\t\022\032\n\022isIntroducedByKeys\030\016 \003(\t\"\301\002\n\tp"
    "ublicKey\022\020\n\010keyLabel\030\001 \001(\t\022\024\n\014dateAnchor"
    "ed\030\002 \001(\003\022\017\n\007version\030\003 \001(\t\022\023\n\013encrKeyData"
    "\030\004 \001(\014\022\022\n\nverKeyData\030\005 \001(\014\022\033\n\023currentKey"
    "ForEmails\030\006 \003(\t\022\024\n\014keyForEmails\030\007 \003(\t\022\035\n"
    "\025keyForDevicesWithUUID\030\010 \003(\t\022 \n\030datesCur"
    "rentKeysAnchored\030\017 \003(\003\022\025\n\risCompromised\030"
    "\013 \001(\010\022\023\n\013dateCreated\030\014 \001(\003\022\026\n\016introduces"
    "Keys\030\r \003(\t\022\032\n\022isIntroducedByKeys\030\016 \003(\t\"p"
    "\n\016keyExpectation\022\023\n\013fromAddress\030\001 \001(\t\022\021\n"
    "\ttoAddress\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022\020\n\010key"
    "Label\030\004 \001(\t\022\023\n\013dateCreated\030\005 \001(\003\"\276\001\n\017pla"
    "inBackupData\022%\n\010privKeys\030\001 \003(\0132\023.mynigma"
    ".privateKey\022#\n\007pubKeys\030\002 \003(\0132\022.mynigma.p"
    "ublicKey\022\017\n\007version\030\003 \001(\t\0220\n\017keyExpectat"
    "ions\030\004 \003(\0132\027.mynigma.keyExpectation\022\034\n\024i"
    "ntegrityCheckString\030\005 \001(\t\"l\n\031backupPassw"
    "ordFileWrapper\022\023\n\013payloadData\030\001 \001(\014\022\023\n\013h"
    "asPassword\030\002 \001(\010\022\017\n\007version\030\003 \001(\t\022\024\n\014pas"
    "swordSalt\030\006 \001(\014B$\n\026org.mynigma.protoc.ge"
    "nB\nBackupData", 1173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "backupData.proto", &protobuf_RegisterTypes);
  privateKey::default_instance_ = new privateKey();
  publicKey::default_instance_ = new publicKey();
  keyExpectation::default_instance_ = new keyExpectation();
  plainBackupData::default_instance_ = new plainBackupData();
  backupPasswordFileWrapper::default_instance_ = new backupPasswordFileWrapper();
  privateKey::default_instance_->InitAsDefaultInstance();
  publicKey::default_instance_->InitAsDefaultInstance();
  keyExpectation::default_instance_->InitAsDefaultInstance();
  plainBackupData::default_instance_->InitAsDefaultInstance();
  backupPasswordFileWrapper::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_backupData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_backupData_2eproto {
  StaticDescriptorInitializer_backupData_2eproto() {
    protobuf_AddDesc_backupData_2eproto();
  }
} static_descriptor_initializer_backupData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int privateKey::kKeyLabelFieldNumber;
const int privateKey::kDateAnchoredFieldNumber;
const int privateKey::kVersionFieldNumber;
const int privateKey::kEncrKeyDataFieldNumber;
const int privateKey::kVerKeyDataFieldNumber;
const int privateKey::kCurrentKeyForEmailsFieldNumber;
const int privateKey::kKeyForEmailsFieldNumber;
const int privateKey::kKeyForDevicesWithUUIDFieldNumber;
const int privateKey::kDatesCurrentKeysAnchoredFieldNumber;
const int privateKey::kDecrKeyDataFieldNumber;
const int privateKey::kSignKeyDataFieldNumber;
const int privateKey::kIsCompromisedFieldNumber;
const int privateKey::kDateCreatedFieldNumber;
const int privateKey::kIntroducesKeysFieldNumber;
const int privateKey::kIsIntroducedByKeysFieldNumber;
#endif  // !_MSC_VER

privateKey::privateKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void privateKey::InitAsDefaultInstance() {
}

privateKey::privateKey(const privateKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void privateKey::SharedCtor() {
  _cached_size_ = 0;
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateanchored_ = GOOGLE_LONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscompromised_ = false;
  datecreated_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

privateKey::~privateKey() {
  SharedDtor();
}

void privateKey::SharedDtor() {
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete decrkeydata_;
  }
  if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete signkeydata_;
  }
  if (this != default_instance_) {
  }
}

void privateKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* privateKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return privateKey_descriptor_;
}

const privateKey& privateKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

privateKey* privateKey::default_instance_ = NULL;

privateKey* privateKey::New() const {
  return new privateKey;
}

void privateKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    dateanchored_ = GOOGLE_LONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_decrkeydata()) {
      if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        decrkeydata_->clear();
      }
    }
    if (has_signkeydata()) {
      if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
        signkeydata_->clear();
      }
    }
    iscompromised_ = false;
    datecreated_ = GOOGLE_LONGLONG(0);
  }
  currentkeyforemails_.Clear();
  keyforemails_.Clear();
  keyfordeviceswithuuid_.Clear();
  datescurrentkeysanchored_.Clear();
  introduceskeys_.Clear();
  isintroducedbykeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool privateKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyLabel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dateAnchored;
        break;
      }

      // optional int64 dateAnchored = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dateanchored_)));
          set_has_dateanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_encrKeyData;
        break;
      }

      // optional bytes encrKeyData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_verKeyData;
        break;
      }

      // optional bytes verKeyData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        break;
      }

      // repeated string currentKeyForEmails = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentKeyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentkeyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).data(),
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        break;
      }

      // repeated string keyForEmails = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyforemails(this->keyforemails_size() - 1).data(),
            this->keyforemails(this->keyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        break;
      }

      // repeated string keyForDevicesWithUUID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForDevicesWithUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyfordeviceswithuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).data(),
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        if (input->ExpectTag(74)) goto parse_decrKeyData;
        break;
      }

      // optional bytes decrKeyData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_decrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_signKeyData;
        break;
      }

      // optional bytes signKeyData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isCompromised;
        break;
      }

      // optional bool isCompromised = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCompromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompromised_)));
          set_has_iscompromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dateCreated;
        break;
      }

      // optional int64 dateCreated = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_introducesKeys;
        break;
      }

      // repeated string introducesKeys = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introducesKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_introduceskeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduceskeys(this->introduceskeys_size() - 1).data(),
            this->introduceskeys(this->introduceskeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_introducesKeys;
        if (input->ExpectTag(114)) goto parse_isIntroducedByKeys;
        break;
      }

      // repeated string isIntroducedByKeys = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isIntroducedByKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_isintroducedbykeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).data(),
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_isIntroducedByKeys;
        if (input->ExpectTag(120)) goto parse_datesCurrentKeysAnchored;
        break;
      }

      // repeated int64 datesCurrentKeysAnchored = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datesCurrentKeysAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 120, input, this->mutable_datescurrentkeysanchored())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_datescurrentkeysanchored())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_datesCurrentKeysAnchored;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void privateKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keylabel(), output);
  }

  // optional int64 dateAnchored = 2;
  if (has_dateanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dateanchored(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // optional bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->encrkeydata(), output);
  }

  // optional bytes verKeyData = 5;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->verkeydata(), output);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->currentkeyforemails(i), output);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyforemails(i).data(), this->keyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->keyforemails(i), output);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->keyfordeviceswithuuid(i), output);
  }

  // optional bytes decrKeyData = 9;
  if (has_decrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->decrkeydata(), output);
  }

  // optional bytes signKeyData = 10;
  if (has_signkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->signkeydata(), output);
  }

  // optional bool isCompromised = 11;
  if (has_iscompromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->iscompromised(), output);
  }

  // optional int64 dateCreated = 12;
  if (has_datecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->datecreated(), output);
  }

  // repeated string introducesKeys = 13;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->introduceskeys(i).data(), this->introduceskeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->introduceskeys(i), output);
  }

  // repeated string isIntroducedByKeys = 14;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->isintroducedbykeys(i), output);
  }

  // repeated int64 datesCurrentKeysAnchored = 15;
  for (int i = 0; i < this->datescurrentkeysanchored_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      15, this->datescurrentkeysanchored(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* privateKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keylabel(), target);
  }

  // optional int64 dateAnchored = 2;
  if (has_dateanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dateanchored(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encrkeydata(), target);
  }

  // optional bytes verKeyData = 5;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->verkeydata(), target);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->currentkeyforemails(i), target);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyforemails(i).data(), this->keyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->keyforemails(i), target);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->keyfordeviceswithuuid(i), target);
  }

  // optional bytes decrKeyData = 9;
  if (has_decrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->decrkeydata(), target);
  }

  // optional bytes signKeyData = 10;
  if (has_signkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->signkeydata(), target);
  }

  // optional bool isCompromised = 11;
  if (has_iscompromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->iscompromised(), target);
  }

  // optional int64 dateCreated = 12;
  if (has_datecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->datecreated(), target);
  }

  // repeated string introducesKeys = 13;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduceskeys(i).data(), this->introduceskeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->introduceskeys(i), target);
  }

  // repeated string isIntroducedByKeys = 14;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->isintroducedbykeys(i), target);
  }

  // repeated int64 datesCurrentKeysAnchored = 15;
  for (int i = 0; i < this->datescurrentkeysanchored_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(15, this->datescurrentkeysanchored(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int privateKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string keyLabel = 1;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int64 dateAnchored = 2;
    if (has_dateanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dateanchored());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bytes encrKeyData = 4;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // optional bytes verKeyData = 5;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bytes decrKeyData = 9;
    if (has_decrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->decrkeydata());
    }

    // optional bytes signKeyData = 10;
    if (has_signkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signkeydata());
    }

    // optional bool isCompromised = 11;
    if (has_iscompromised()) {
      total_size += 1 + 1;
    }

    // optional int64 dateCreated = 12;
    if (has_datecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datecreated());
    }

  }
  // repeated string currentKeyForEmails = 6;
  total_size += 1 * this->currentkeyforemails_size();
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentkeyforemails(i));
  }

  // repeated string keyForEmails = 7;
  total_size += 1 * this->keyforemails_size();
  for (int i = 0; i < this->keyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyforemails(i));
  }

  // repeated string keyForDevicesWithUUID = 8;
  total_size += 1 * this->keyfordeviceswithuuid_size();
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyfordeviceswithuuid(i));
  }

  // repeated int64 datesCurrentKeysAnchored = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->datescurrentkeysanchored_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->datescurrentkeysanchored(i));
    }
    total_size += 1 * this->datescurrentkeysanchored_size() + data_size;
  }

  // repeated string introducesKeys = 13;
  total_size += 1 * this->introduceskeys_size();
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->introduceskeys(i));
  }

  // repeated string isIntroducedByKeys = 14;
  total_size += 1 * this->isintroducedbykeys_size();
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->isintroducedbykeys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void privateKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const privateKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const privateKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void privateKey::MergeFrom(const privateKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentkeyforemails_.MergeFrom(from.currentkeyforemails_);
  keyforemails_.MergeFrom(from.keyforemails_);
  keyfordeviceswithuuid_.MergeFrom(from.keyfordeviceswithuuid_);
  datescurrentkeysanchored_.MergeFrom(from.datescurrentkeysanchored_);
  introduceskeys_.MergeFrom(from.introduceskeys_);
  isintroducedbykeys_.MergeFrom(from.isintroducedbykeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_dateanchored()) {
      set_dateanchored(from.dateanchored());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_decrkeydata()) {
      set_decrkeydata(from.decrkeydata());
    }
    if (from.has_signkeydata()) {
      set_signkeydata(from.signkeydata());
    }
    if (from.has_iscompromised()) {
      set_iscompromised(from.iscompromised());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void privateKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void privateKey::CopyFrom(const privateKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool privateKey::IsInitialized() const {

  return true;
}

void privateKey::Swap(privateKey* other) {
  if (other != this) {
    std::swap(keylabel_, other->keylabel_);
    std::swap(dateanchored_, other->dateanchored_);
    std::swap(version_, other->version_);
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    currentkeyforemails_.Swap(&other->currentkeyforemails_);
    keyforemails_.Swap(&other->keyforemails_);
    keyfordeviceswithuuid_.Swap(&other->keyfordeviceswithuuid_);
    datescurrentkeysanchored_.Swap(&other->datescurrentkeysanchored_);
    std::swap(decrkeydata_, other->decrkeydata_);
    std::swap(signkeydata_, other->signkeydata_);
    std::swap(iscompromised_, other->iscompromised_);
    std::swap(datecreated_, other->datecreated_);
    introduceskeys_.Swap(&other->introduceskeys_);
    isintroducedbykeys_.Swap(&other->isintroducedbykeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata privateKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = privateKey_descriptor_;
  metadata.reflection = privateKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int publicKey::kKeyLabelFieldNumber;
const int publicKey::kDateAnchoredFieldNumber;
const int publicKey::kVersionFieldNumber;
const int publicKey::kEncrKeyDataFieldNumber;
const int publicKey::kVerKeyDataFieldNumber;
const int publicKey::kCurrentKeyForEmailsFieldNumber;
const int publicKey::kKeyForEmailsFieldNumber;
const int publicKey::kKeyForDevicesWithUUIDFieldNumber;
const int publicKey::kDatesCurrentKeysAnchoredFieldNumber;
const int publicKey::kIsCompromisedFieldNumber;
const int publicKey::kDateCreatedFieldNumber;
const int publicKey::kIntroducesKeysFieldNumber;
const int publicKey::kIsIntroducedByKeysFieldNumber;
#endif  // !_MSC_VER

publicKey::publicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void publicKey::InitAsDefaultInstance() {
}

publicKey::publicKey(const publicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void publicKey::SharedCtor() {
  _cached_size_ = 0;
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateanchored_ = GOOGLE_LONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscompromised_ = false;
  datecreated_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

publicKey::~publicKey() {
  SharedDtor();
}

void publicKey::SharedDtor() {
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (this != default_instance_) {
  }
}

void publicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* publicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return publicKey_descriptor_;
}

const publicKey& publicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

publicKey* publicKey::default_instance_ = NULL;

publicKey* publicKey::New() const {
  return new publicKey;
}

void publicKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    dateanchored_ = GOOGLE_LONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    iscompromised_ = false;
    datecreated_ = GOOGLE_LONGLONG(0);
  }
  currentkeyforemails_.Clear();
  keyforemails_.Clear();
  keyfordeviceswithuuid_.Clear();
  datescurrentkeysanchored_.Clear();
  introduceskeys_.Clear();
  isintroducedbykeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool publicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyLabel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dateAnchored;
        break;
      }

      // optional int64 dateAnchored = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dateanchored_)));
          set_has_dateanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_encrKeyData;
        break;
      }

      // optional bytes encrKeyData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_verKeyData;
        break;
      }

      // optional bytes verKeyData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        break;
      }

      // repeated string currentKeyForEmails = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentKeyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentkeyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).data(),
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        break;
      }

      // repeated string keyForEmails = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyforemails(this->keyforemails_size() - 1).data(),
            this->keyforemails(this->keyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        break;
      }

      // repeated string keyForDevicesWithUUID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForDevicesWithUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyfordeviceswithuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).data(),
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        if (input->ExpectTag(88)) goto parse_isCompromised;
        break;
      }

      // optional bool isCompromised = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCompromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompromised_)));
          set_has_iscompromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dateCreated;
        break;
      }

      // optional int64 dateCreated = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_introducesKeys;
        break;
      }

      // repeated string introducesKeys = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introducesKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_introduceskeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduceskeys(this->introduceskeys_size() - 1).data(),
            this->introduceskeys(this->introduceskeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_introducesKeys;
        if (input->ExpectTag(114)) goto parse_isIntroducedByKeys;
        break;
      }

      // repeated string isIntroducedByKeys = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isIntroducedByKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_isintroducedbykeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).data(),
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_isIntroducedByKeys;
        if (input->ExpectTag(120)) goto parse_datesCurrentKeysAnchored;
        break;
      }

      // repeated int64 datesCurrentKeysAnchored = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datesCurrentKeysAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 120, input, this->mutable_datescurrentkeysanchored())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_datescurrentkeysanchored())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_datesCurrentKeysAnchored;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void publicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keylabel(), output);
  }

  // optional int64 dateAnchored = 2;
  if (has_dateanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dateanchored(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // optional bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->encrkeydata(), output);
  }

  // optional bytes verKeyData = 5;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->verkeydata(), output);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->currentkeyforemails(i), output);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyforemails(i).data(), this->keyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->keyforemails(i), output);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->keyfordeviceswithuuid(i), output);
  }

  // optional bool isCompromised = 11;
  if (has_iscompromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->iscompromised(), output);
  }

  // optional int64 dateCreated = 12;
  if (has_datecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->datecreated(), output);
  }

  // repeated string introducesKeys = 13;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->introduceskeys(i).data(), this->introduceskeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->introduceskeys(i), output);
  }

  // repeated string isIntroducedByKeys = 14;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->isintroducedbykeys(i), output);
  }

  // repeated int64 datesCurrentKeysAnchored = 15;
  for (int i = 0; i < this->datescurrentkeysanchored_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      15, this->datescurrentkeysanchored(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* publicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keylabel(), target);
  }

  // optional int64 dateAnchored = 2;
  if (has_dateanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dateanchored(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encrkeydata(), target);
  }

  // optional bytes verKeyData = 5;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->verkeydata(), target);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->currentkeyforemails(i), target);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyforemails(i).data(), this->keyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->keyforemails(i), target);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->keyfordeviceswithuuid(i), target);
  }

  // optional bool isCompromised = 11;
  if (has_iscompromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->iscompromised(), target);
  }

  // optional int64 dateCreated = 12;
  if (has_datecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->datecreated(), target);
  }

  // repeated string introducesKeys = 13;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduceskeys(i).data(), this->introduceskeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->introduceskeys(i), target);
  }

  // repeated string isIntroducedByKeys = 14;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->isintroducedbykeys(i), target);
  }

  // repeated int64 datesCurrentKeysAnchored = 15;
  for (int i = 0; i < this->datescurrentkeysanchored_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(15, this->datescurrentkeysanchored(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int publicKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string keyLabel = 1;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int64 dateAnchored = 2;
    if (has_dateanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dateanchored());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bytes encrKeyData = 4;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // optional bytes verKeyData = 5;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool isCompromised = 11;
    if (has_iscompromised()) {
      total_size += 1 + 1;
    }

    // optional int64 dateCreated = 12;
    if (has_datecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datecreated());
    }

  }
  // repeated string currentKeyForEmails = 6;
  total_size += 1 * this->currentkeyforemails_size();
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentkeyforemails(i));
  }

  // repeated string keyForEmails = 7;
  total_size += 1 * this->keyforemails_size();
  for (int i = 0; i < this->keyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyforemails(i));
  }

  // repeated string keyForDevicesWithUUID = 8;
  total_size += 1 * this->keyfordeviceswithuuid_size();
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyfordeviceswithuuid(i));
  }

  // repeated int64 datesCurrentKeysAnchored = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->datescurrentkeysanchored_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->datescurrentkeysanchored(i));
    }
    total_size += 1 * this->datescurrentkeysanchored_size() + data_size;
  }

  // repeated string introducesKeys = 13;
  total_size += 1 * this->introduceskeys_size();
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->introduceskeys(i));
  }

  // repeated string isIntroducedByKeys = 14;
  total_size += 1 * this->isintroducedbykeys_size();
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->isintroducedbykeys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void publicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const publicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const publicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void publicKey::MergeFrom(const publicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentkeyforemails_.MergeFrom(from.currentkeyforemails_);
  keyforemails_.MergeFrom(from.keyforemails_);
  keyfordeviceswithuuid_.MergeFrom(from.keyfordeviceswithuuid_);
  datescurrentkeysanchored_.MergeFrom(from.datescurrentkeysanchored_);
  introduceskeys_.MergeFrom(from.introduceskeys_);
  isintroducedbykeys_.MergeFrom(from.isintroducedbykeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_dateanchored()) {
      set_dateanchored(from.dateanchored());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_iscompromised()) {
      set_iscompromised(from.iscompromised());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void publicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void publicKey::CopyFrom(const publicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool publicKey::IsInitialized() const {

  return true;
}

void publicKey::Swap(publicKey* other) {
  if (other != this) {
    std::swap(keylabel_, other->keylabel_);
    std::swap(dateanchored_, other->dateanchored_);
    std::swap(version_, other->version_);
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    currentkeyforemails_.Swap(&other->currentkeyforemails_);
    keyforemails_.Swap(&other->keyforemails_);
    keyfordeviceswithuuid_.Swap(&other->keyfordeviceswithuuid_);
    datescurrentkeysanchored_.Swap(&other->datescurrentkeysanchored_);
    std::swap(iscompromised_, other->iscompromised_);
    std::swap(datecreated_, other->datecreated_);
    introduceskeys_.Swap(&other->introduceskeys_);
    isintroducedbykeys_.Swap(&other->isintroducedbykeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata publicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = publicKey_descriptor_;
  metadata.reflection = publicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int keyExpectation::kFromAddressFieldNumber;
const int keyExpectation::kToAddressFieldNumber;
const int keyExpectation::kVersionFieldNumber;
const int keyExpectation::kKeyLabelFieldNumber;
const int keyExpectation::kDateCreatedFieldNumber;
#endif  // !_MSC_VER

keyExpectation::keyExpectation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void keyExpectation::InitAsDefaultInstance() {
}

keyExpectation::keyExpectation(const keyExpectation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void keyExpectation::SharedCtor() {
  _cached_size_ = 0;
  fromaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datecreated_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

keyExpectation::~keyExpectation() {
  SharedDtor();
}

void keyExpectation::SharedDtor() {
  if (fromaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete fromaddress_;
  }
  if (toaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete toaddress_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (this != default_instance_) {
  }
}

void keyExpectation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* keyExpectation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return keyExpectation_descriptor_;
}

const keyExpectation& keyExpectation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

keyExpectation* keyExpectation::default_instance_ = NULL;

keyExpectation* keyExpectation::New() const {
  return new keyExpectation;
}

void keyExpectation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromaddress()) {
      if (fromaddress_ != &::google::protobuf::internal::kEmptyString) {
        fromaddress_->clear();
      }
    }
    if (has_toaddress()) {
      if (toaddress_ != &::google::protobuf::internal::kEmptyString) {
        toaddress_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    datecreated_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool keyExpectation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fromAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromaddress().data(), this->fromaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toAddress;
        break;
      }

      // optional string toAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toaddress().data(), this->toaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyLabel;
        break;
      }

      // optional string keyLabel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dateCreated;
        break;
      }

      // optional int64 dateCreated = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void keyExpectation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fromAddress = 1;
  if (has_fromaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromaddress().data(), this->fromaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fromaddress(), output);
  }

  // optional string toAddress = 2;
  if (has_toaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toaddress().data(), this->toaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->toaddress(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // optional string keyLabel = 4;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keylabel(), output);
  }

  // optional int64 dateCreated = 5;
  if (has_datecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->datecreated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* keyExpectation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fromAddress = 1;
  if (has_fromaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromaddress().data(), this->fromaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromaddress(), target);
  }

  // optional string toAddress = 2;
  if (has_toaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toaddress().data(), this->toaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toaddress(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional string keyLabel = 4;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->keylabel(), target);
  }

  // optional int64 dateCreated = 5;
  if (has_datecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->datecreated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int keyExpectation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fromAddress = 1;
    if (has_fromaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromaddress());
    }

    // optional string toAddress = 2;
    if (has_toaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toaddress());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string keyLabel = 4;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int64 dateCreated = 5;
    if (has_datecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datecreated());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void keyExpectation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const keyExpectation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const keyExpectation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void keyExpectation::MergeFrom(const keyExpectation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromaddress()) {
      set_fromaddress(from.fromaddress());
    }
    if (from.has_toaddress()) {
      set_toaddress(from.toaddress());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void keyExpectation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void keyExpectation::CopyFrom(const keyExpectation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keyExpectation::IsInitialized() const {

  return true;
}

void keyExpectation::Swap(keyExpectation* other) {
  if (other != this) {
    std::swap(fromaddress_, other->fromaddress_);
    std::swap(toaddress_, other->toaddress_);
    std::swap(version_, other->version_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(datecreated_, other->datecreated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata keyExpectation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = keyExpectation_descriptor_;
  metadata.reflection = keyExpectation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plainBackupData::kPrivKeysFieldNumber;
const int plainBackupData::kPubKeysFieldNumber;
const int plainBackupData::kVersionFieldNumber;
const int plainBackupData::kKeyExpectationsFieldNumber;
const int plainBackupData::kIntegrityCheckStringFieldNumber;
#endif  // !_MSC_VER

plainBackupData::plainBackupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plainBackupData::InitAsDefaultInstance() {
}

plainBackupData::plainBackupData(const plainBackupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plainBackupData::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  integritycheckstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plainBackupData::~plainBackupData() {
  SharedDtor();
}

void plainBackupData::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (integritycheckstring_ != &::google::protobuf::internal::kEmptyString) {
    delete integritycheckstring_;
  }
  if (this != default_instance_) {
  }
}

void plainBackupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plainBackupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plainBackupData_descriptor_;
}

const plainBackupData& plainBackupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

plainBackupData* plainBackupData::default_instance_ = NULL;

plainBackupData* plainBackupData::New() const {
  return new plainBackupData;
}

void plainBackupData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_integritycheckstring()) {
      if (integritycheckstring_ != &::google::protobuf::internal::kEmptyString) {
        integritycheckstring_->clear();
      }
    }
  }
  privkeys_.Clear();
  pubkeys_.Clear();
  keyexpectations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plainBackupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mynigma.privateKey privKeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_privKeys;
        if (input->ExpectTag(18)) goto parse_pubKeys;
        break;
      }

      // repeated .mynigma.publicKey pubKeys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pubkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pubKeys;
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyExpectations;
        break;
      }

      // repeated .mynigma.keyExpectation keyExpectations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyExpectations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyexpectations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyExpectations;
        if (input->ExpectTag(42)) goto parse_integrityCheckString;
        break;
      }

      // optional string integrityCheckString = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_integrityCheckString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integritycheckstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->integritycheckstring().data(), this->integritycheckstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plainBackupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mynigma.privateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->privkeys(i), output);
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pubkeys(i), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // repeated .mynigma.keyExpectation keyExpectations = 4;
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->keyexpectations(i), output);
  }

  // optional string integrityCheckString = 5;
  if (has_integritycheckstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integritycheckstring().data(), this->integritycheckstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->integritycheckstring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plainBackupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mynigma.privateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->privkeys(i), target);
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pubkeys(i), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // repeated .mynigma.keyExpectation keyExpectations = 4;
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->keyexpectations(i), target);
  }

  // optional string integrityCheckString = 5;
  if (has_integritycheckstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integritycheckstring().data(), this->integritycheckstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->integritycheckstring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plainBackupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string integrityCheckString = 5;
    if (has_integritycheckstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->integritycheckstring());
    }

  }
  // repeated .mynigma.privateKey privKeys = 1;
  total_size += 1 * this->privkeys_size();
  for (int i = 0; i < this->privkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privkeys(i));
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  total_size += 1 * this->pubkeys_size();
  for (int i = 0; i < this->pubkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pubkeys(i));
  }

  // repeated .mynigma.keyExpectation keyExpectations = 4;
  total_size += 1 * this->keyexpectations_size();
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyexpectations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plainBackupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plainBackupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plainBackupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plainBackupData::MergeFrom(const plainBackupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  privkeys_.MergeFrom(from.privkeys_);
  pubkeys_.MergeFrom(from.pubkeys_);
  keyexpectations_.MergeFrom(from.keyexpectations_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_integritycheckstring()) {
      set_integritycheckstring(from.integritycheckstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plainBackupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plainBackupData::CopyFrom(const plainBackupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plainBackupData::IsInitialized() const {

  return true;
}

void plainBackupData::Swap(plainBackupData* other) {
  if (other != this) {
    privkeys_.Swap(&other->privkeys_);
    pubkeys_.Swap(&other->pubkeys_);
    std::swap(version_, other->version_);
    keyexpectations_.Swap(&other->keyexpectations_);
    std::swap(integritycheckstring_, other->integritycheckstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plainBackupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plainBackupData_descriptor_;
  metadata.reflection = plainBackupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int backupPasswordFileWrapper::kPayloadDataFieldNumber;
const int backupPasswordFileWrapper::kHasPasswordFieldNumber;
const int backupPasswordFileWrapper::kVersionFieldNumber;
const int backupPasswordFileWrapper::kPasswordSaltFieldNumber;
#endif  // !_MSC_VER

backupPasswordFileWrapper::backupPasswordFileWrapper()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void backupPasswordFileWrapper::InitAsDefaultInstance() {
}

backupPasswordFileWrapper::backupPasswordFileWrapper(const backupPasswordFileWrapper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void backupPasswordFileWrapper::SharedCtor() {
  _cached_size_ = 0;
  payloaddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haspassword_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwordsalt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

backupPasswordFileWrapper::~backupPasswordFileWrapper() {
  SharedDtor();
}

void backupPasswordFileWrapper::SharedDtor() {
  if (payloaddata_ != &::google::protobuf::internal::kEmptyString) {
    delete payloaddata_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (passwordsalt_ != &::google::protobuf::internal::kEmptyString) {
    delete passwordsalt_;
  }
  if (this != default_instance_) {
  }
}

void backupPasswordFileWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* backupPasswordFileWrapper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return backupPasswordFileWrapper_descriptor_;
}

const backupPasswordFileWrapper& backupPasswordFileWrapper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

backupPasswordFileWrapper* backupPasswordFileWrapper::default_instance_ = NULL;

backupPasswordFileWrapper* backupPasswordFileWrapper::New() const {
  return new backupPasswordFileWrapper;
}

void backupPasswordFileWrapper::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payloaddata()) {
      if (payloaddata_ != &::google::protobuf::internal::kEmptyString) {
        payloaddata_->clear();
      }
    }
    haspassword_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_passwordsalt()) {
      if (passwordsalt_ != &::google::protobuf::internal::kEmptyString) {
        passwordsalt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool backupPasswordFileWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payloadData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payloaddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasPassword;
        break;
      }

      // optional bool hasPassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasPassword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspassword_)));
          set_has_haspassword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_passwordSalt;
        break;
      }

      // optional bytes passwordSalt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwordSalt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_passwordsalt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void backupPasswordFileWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes payloadData = 1;
  if (has_payloaddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->payloaddata(), output);
  }

  // optional bool hasPassword = 2;
  if (has_haspassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->haspassword(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // optional bytes passwordSalt = 6;
  if (has_passwordsalt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->passwordsalt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* backupPasswordFileWrapper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes payloadData = 1;
  if (has_payloaddata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payloaddata(), target);
  }

  // optional bool hasPassword = 2;
  if (has_haspassword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->haspassword(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional bytes passwordSalt = 6;
  if (has_passwordsalt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->passwordsalt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int backupPasswordFileWrapper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes payloadData = 1;
    if (has_payloaddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payloaddata());
    }

    // optional bool hasPassword = 2;
    if (has_haspassword()) {
      total_size += 1 + 1;
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bytes passwordSalt = 6;
    if (has_passwordsalt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->passwordsalt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void backupPasswordFileWrapper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const backupPasswordFileWrapper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const backupPasswordFileWrapper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void backupPasswordFileWrapper::MergeFrom(const backupPasswordFileWrapper& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payloaddata()) {
      set_payloaddata(from.payloaddata());
    }
    if (from.has_haspassword()) {
      set_haspassword(from.haspassword());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_passwordsalt()) {
      set_passwordsalt(from.passwordsalt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void backupPasswordFileWrapper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void backupPasswordFileWrapper::CopyFrom(const backupPasswordFileWrapper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool backupPasswordFileWrapper::IsInitialized() const {

  return true;
}

void backupPasswordFileWrapper::Swap(backupPasswordFileWrapper* other) {
  if (other != this) {
    std::swap(payloaddata_, other->payloaddata_);
    std::swap(haspassword_, other->haspassword_);
    std::swap(version_, other->version_);
    std::swap(passwordsalt_, other->passwordsalt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata backupPasswordFileWrapper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = backupPasswordFileWrapper_descriptor_;
  metadata.reflection = backupPasswordFileWrapper_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mynigma

// @@protoc_insertion_point(global_scope)
