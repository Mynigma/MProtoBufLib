// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backupData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "backupData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mynigma {

namespace {

const ::google::protobuf::Descriptor* privateKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  privateKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* publicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  publicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* keyExpectation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  keyExpectation_reflection_ = NULL;
const ::google::protobuf::Descriptor* backupFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  backupFile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_backupData_2eproto() {
  protobuf_AddDesc_backupData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "backupData.proto");
  GOOGLE_CHECK(file != NULL);
  privateKey_descriptor_ = file->message_type(0);
  static const int privateKey_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, dateanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, currentkeyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, keyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, keyfordeviceswithuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, decrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, signkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, iscompromised_),
  };
  privateKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      privateKey_descriptor_,
      privateKey::default_instance_,
      privateKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(privateKey));
  publicKey_descriptor_ = file->message_type(1);
  static const int publicKey_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, dateanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, currentkeyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, keyforemails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, keyfordeviceswithuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, introduceskeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, isintroducedbykeys_),
  };
  publicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      publicKey_descriptor_,
      publicKey::default_instance_,
      publicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(publicKey));
  keyExpectation_descriptor_ = file->message_type(2);
  static const int keyExpectation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, fromaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, toaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, dateanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, version_),
  };
  keyExpectation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      keyExpectation_descriptor_,
      keyExpectation::default_instance_,
      keyExpectation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(keyExpectation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(keyExpectation));
  backupFile_descriptor_ = file->message_type(3);
  static const int backupFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupFile, privkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupFile, pubkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupFile, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupFile, keyexpectations_),
  };
  backupFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      backupFile_descriptor_,
      backupFile::default_instance_,
      backupFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backupFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(backupFile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_backupData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    privateKey_descriptor_, &privateKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    publicKey_descriptor_, &publicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    keyExpectation_descriptor_, &keyExpectation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    backupFile_descriptor_, &backupFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_backupData_2eproto() {
  delete privateKey::default_instance_;
  delete privateKey_reflection_;
  delete publicKey::default_instance_;
  delete publicKey_reflection_;
  delete keyExpectation::default_instance_;
  delete keyExpectation_reflection_;
  delete backupFile::default_instance_;
  delete backupFile_reflection_;
}

void protobuf_AddDesc_backupData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020backupData.proto\022\007mynigma\"\201\002\n\nprivateK"
    "ey\022\020\n\010keyLabel\030\001 \002(\t\022\024\n\014dateAnchored\030\002 \001"
    "(\005\022\017\n\007version\030\003 \001(\t\022\023\n\013encrKeyData\030\004 \001(\014"
    "\022\022\n\nverKeyData\030\005 \001(\014\022\033\n\023currentKeyForEma"
    "ils\030\006 \003(\t\022\024\n\014keyForEmails\030\007 \003(\t\022\035\n\025keyFo"
    "rDevicesWithUUID\030\010 \003(\t\022\023\n\013decrKeyData\030\t "
    "\002(\014\022\023\n\013signKeyData\030\n \002(\014\022\025\n\risCompromise"
    "d\030\013 \001(\010\"\363\001\n\tpublicKey\022\020\n\010keyLabel\030\001 \002(\t\022"
    "\024\n\014dateAnchored\030\002 \001(\005\022\017\n\007version\030\003 \001(\t\022\023"
    "\n\013encrKeyData\030\004 \002(\014\022\022\n\nverKeyData\030\005 \002(\014\022"
    "\033\n\023currentKeyForEmails\030\006 \003(\t\022\024\n\014keyForEm"
    "ails\030\007 \003(\t\022\035\n\025keyForDevicesWithUUID\030\010 \003("
    "\t\022\026\n\016introducesKeys\030\r \003(\t\022\032\n\022isIntroduce"
    "dByKeys\030\016 \003(\t\"q\n\016keyExpectation\022\023\n\013fromA"
    "ddress\030\001 \001(\t\022\021\n\ttoAddress\030\002 \001(\t\022\020\n\010keyLa"
    "bel\030\003 \001(\t\022\024\n\014dateAnchored\030\004 \001(\005\022\017\n\007versi"
    "on\030\005 \001(\t\"\233\001\n\nbackupFile\022%\n\010privKeys\030\001 \003("
    "\0132\023.mynigma.privateKey\022#\n\007pubKeys\030\002 \003(\0132"
    "\022.mynigma.publicKey\022\017\n\007version\030\003 \001(\t\0220\n\017"
    "keyExpectations\030\004 \003(\0132\027.mynigma.keyExpec"
    "tationB$\n\026org.mynigma.protoc.genB\nBackup"
    "Data", 844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "backupData.proto", &protobuf_RegisterTypes);
  privateKey::default_instance_ = new privateKey();
  publicKey::default_instance_ = new publicKey();
  keyExpectation::default_instance_ = new keyExpectation();
  backupFile::default_instance_ = new backupFile();
  privateKey::default_instance_->InitAsDefaultInstance();
  publicKey::default_instance_->InitAsDefaultInstance();
  keyExpectation::default_instance_->InitAsDefaultInstance();
  backupFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_backupData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_backupData_2eproto {
  StaticDescriptorInitializer_backupData_2eproto() {
    protobuf_AddDesc_backupData_2eproto();
  }
} static_descriptor_initializer_backupData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int privateKey::kKeyLabelFieldNumber;
const int privateKey::kDateAnchoredFieldNumber;
const int privateKey::kVersionFieldNumber;
const int privateKey::kEncrKeyDataFieldNumber;
const int privateKey::kVerKeyDataFieldNumber;
const int privateKey::kCurrentKeyForEmailsFieldNumber;
const int privateKey::kKeyForEmailsFieldNumber;
const int privateKey::kKeyForDevicesWithUUIDFieldNumber;
const int privateKey::kDecrKeyDataFieldNumber;
const int privateKey::kSignKeyDataFieldNumber;
const int privateKey::kIsCompromisedFieldNumber;
#endif  // !_MSC_VER

privateKey::privateKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void privateKey::InitAsDefaultInstance() {
}

privateKey::privateKey(const privateKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void privateKey::SharedCtor() {
  _cached_size_ = 0;
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateanchored_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscompromised_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

privateKey::~privateKey() {
  SharedDtor();
}

void privateKey::SharedDtor() {
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete decrkeydata_;
  }
  if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete signkeydata_;
  }
  if (this != default_instance_) {
  }
}

void privateKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* privateKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return privateKey_descriptor_;
}

const privateKey& privateKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

privateKey* privateKey::default_instance_ = NULL;

privateKey* privateKey::New() const {
  return new privateKey;
}

void privateKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    dateanchored_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_decrkeydata()) {
      if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        decrkeydata_->clear();
      }
    }
    if (has_signkeydata()) {
      if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
        signkeydata_->clear();
      }
    }
    iscompromised_ = false;
  }
  currentkeyforemails_.Clear();
  keyforemails_.Clear();
  keyfordeviceswithuuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool privateKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyLabel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dateAnchored;
        break;
      }

      // optional int32 dateAnchored = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateanchored_)));
          set_has_dateanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_encrKeyData;
        break;
      }

      // optional bytes encrKeyData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_verKeyData;
        break;
      }

      // optional bytes verKeyData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        break;
      }

      // repeated string currentKeyForEmails = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentKeyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentkeyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).data(),
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        break;
      }

      // repeated string keyForEmails = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyforemails(this->keyforemails_size() - 1).data(),
            this->keyforemails(this->keyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        break;
      }

      // repeated string keyForDevicesWithUUID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForDevicesWithUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyfordeviceswithuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).data(),
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        if (input->ExpectTag(74)) goto parse_decrKeyData;
        break;
      }

      // required bytes decrKeyData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_decrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_signKeyData;
        break;
      }

      // required bytes signKeyData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isCompromised;
        break;
      }

      // optional bool isCompromised = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCompromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompromised_)));
          set_has_iscompromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void privateKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keylabel(), output);
  }

  // optional int32 dateAnchored = 2;
  if (has_dateanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dateanchored(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // optional bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->encrkeydata(), output);
  }

  // optional bytes verKeyData = 5;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->verkeydata(), output);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->currentkeyforemails(i), output);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyforemails(i).data(), this->keyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->keyforemails(i), output);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->keyfordeviceswithuuid(i), output);
  }

  // required bytes decrKeyData = 9;
  if (has_decrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->decrkeydata(), output);
  }

  // required bytes signKeyData = 10;
  if (has_signkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->signkeydata(), output);
  }

  // optional bool isCompromised = 11;
  if (has_iscompromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->iscompromised(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* privateKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keylabel(), target);
  }

  // optional int32 dateAnchored = 2;
  if (has_dateanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dateanchored(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encrkeydata(), target);
  }

  // optional bytes verKeyData = 5;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->verkeydata(), target);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->currentkeyforemails(i), target);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyforemails(i).data(), this->keyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->keyforemails(i), target);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->keyfordeviceswithuuid(i), target);
  }

  // required bytes decrKeyData = 9;
  if (has_decrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->decrkeydata(), target);
  }

  // required bytes signKeyData = 10;
  if (has_signkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->signkeydata(), target);
  }

  // optional bool isCompromised = 11;
  if (has_iscompromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->iscompromised(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int privateKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyLabel = 1;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateAnchored = 2;
    if (has_dateanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateanchored());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bytes encrKeyData = 4;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // optional bytes verKeyData = 5;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes decrKeyData = 9;
    if (has_decrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->decrkeydata());
    }

    // required bytes signKeyData = 10;
    if (has_signkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signkeydata());
    }

    // optional bool isCompromised = 11;
    if (has_iscompromised()) {
      total_size += 1 + 1;
    }

  }
  // repeated string currentKeyForEmails = 6;
  total_size += 1 * this->currentkeyforemails_size();
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentkeyforemails(i));
  }

  // repeated string keyForEmails = 7;
  total_size += 1 * this->keyforemails_size();
  for (int i = 0; i < this->keyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyforemails(i));
  }

  // repeated string keyForDevicesWithUUID = 8;
  total_size += 1 * this->keyfordeviceswithuuid_size();
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyfordeviceswithuuid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void privateKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const privateKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const privateKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void privateKey::MergeFrom(const privateKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentkeyforemails_.MergeFrom(from.currentkeyforemails_);
  keyforemails_.MergeFrom(from.keyforemails_);
  keyfordeviceswithuuid_.MergeFrom(from.keyfordeviceswithuuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_dateanchored()) {
      set_dateanchored(from.dateanchored());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_decrkeydata()) {
      set_decrkeydata(from.decrkeydata());
    }
    if (from.has_signkeydata()) {
      set_signkeydata(from.signkeydata());
    }
    if (from.has_iscompromised()) {
      set_iscompromised(from.iscompromised());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void privateKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void privateKey::CopyFrom(const privateKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool privateKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000301) != 0x00000301) return false;

  return true;
}

void privateKey::Swap(privateKey* other) {
  if (other != this) {
    std::swap(keylabel_, other->keylabel_);
    std::swap(dateanchored_, other->dateanchored_);
    std::swap(version_, other->version_);
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    currentkeyforemails_.Swap(&other->currentkeyforemails_);
    keyforemails_.Swap(&other->keyforemails_);
    keyfordeviceswithuuid_.Swap(&other->keyfordeviceswithuuid_);
    std::swap(decrkeydata_, other->decrkeydata_);
    std::swap(signkeydata_, other->signkeydata_);
    std::swap(iscompromised_, other->iscompromised_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata privateKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = privateKey_descriptor_;
  metadata.reflection = privateKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int publicKey::kKeyLabelFieldNumber;
const int publicKey::kDateAnchoredFieldNumber;
const int publicKey::kVersionFieldNumber;
const int publicKey::kEncrKeyDataFieldNumber;
const int publicKey::kVerKeyDataFieldNumber;
const int publicKey::kCurrentKeyForEmailsFieldNumber;
const int publicKey::kKeyForEmailsFieldNumber;
const int publicKey::kKeyForDevicesWithUUIDFieldNumber;
const int publicKey::kIntroducesKeysFieldNumber;
const int publicKey::kIsIntroducedByKeysFieldNumber;
#endif  // !_MSC_VER

publicKey::publicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void publicKey::InitAsDefaultInstance() {
}

publicKey::publicKey(const publicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void publicKey::SharedCtor() {
  _cached_size_ = 0;
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateanchored_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

publicKey::~publicKey() {
  SharedDtor();
}

void publicKey::SharedDtor() {
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (this != default_instance_) {
  }
}

void publicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* publicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return publicKey_descriptor_;
}

const publicKey& publicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

publicKey* publicKey::default_instance_ = NULL;

publicKey* publicKey::New() const {
  return new publicKey;
}

void publicKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    dateanchored_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
  }
  currentkeyforemails_.Clear();
  keyforemails_.Clear();
  keyfordeviceswithuuid_.Clear();
  introduceskeys_.Clear();
  isintroducedbykeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool publicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyLabel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dateAnchored;
        break;
      }

      // optional int32 dateAnchored = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateanchored_)));
          set_has_dateanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_encrKeyData;
        break;
      }

      // required bytes encrKeyData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_verKeyData;
        break;
      }

      // required bytes verKeyData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        break;
      }

      // repeated string currentKeyForEmails = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentKeyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentkeyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).data(),
            this->currentkeyforemails(this->currentkeyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentKeyForEmails;
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        break;
      }

      // repeated string keyForEmails = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForEmails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyforemails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyforemails(this->keyforemails_size() - 1).data(),
            this->keyforemails(this->keyforemails_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_keyForEmails;
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        break;
      }

      // repeated string keyForDevicesWithUUID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyForDevicesWithUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keyfordeviceswithuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).data(),
            this->keyfordeviceswithuuid(this->keyfordeviceswithuuid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_keyForDevicesWithUUID;
        if (input->ExpectTag(106)) goto parse_introducesKeys;
        break;
      }

      // repeated string introducesKeys = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introducesKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_introduceskeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduceskeys(this->introduceskeys_size() - 1).data(),
            this->introduceskeys(this->introduceskeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_introducesKeys;
        if (input->ExpectTag(114)) goto parse_isIntroducedByKeys;
        break;
      }

      // repeated string isIntroducedByKeys = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isIntroducedByKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_isintroducedbykeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).data(),
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_isIntroducedByKeys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void publicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keylabel(), output);
  }

  // optional int32 dateAnchored = 2;
  if (has_dateanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dateanchored(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // required bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->encrkeydata(), output);
  }

  // required bytes verKeyData = 5;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->verkeydata(), output);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->currentkeyforemails(i), output);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyforemails(i).data(), this->keyforemails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->keyforemails(i), output);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->keyfordeviceswithuuid(i), output);
  }

  // repeated string introducesKeys = 13;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->introduceskeys(i).data(), this->introduceskeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->introduceskeys(i), output);
  }

  // repeated string isIntroducedByKeys = 14;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->isintroducedbykeys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* publicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string keyLabel = 1;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keylabel(), target);
  }

  // optional int32 dateAnchored = 2;
  if (has_dateanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dateanchored(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // required bytes encrKeyData = 4;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encrkeydata(), target);
  }

  // required bytes verKeyData = 5;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->verkeydata(), target);
  }

  // repeated string currentKeyForEmails = 6;
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentkeyforemails(i).data(), this->currentkeyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->currentkeyforemails(i), target);
  }

  // repeated string keyForEmails = 7;
  for (int i = 0; i < this->keyforemails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyforemails(i).data(), this->keyforemails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->keyforemails(i), target);
  }

  // repeated string keyForDevicesWithUUID = 8;
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyfordeviceswithuuid(i).data(), this->keyfordeviceswithuuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->keyfordeviceswithuuid(i), target);
  }

  // repeated string introducesKeys = 13;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduceskeys(i).data(), this->introduceskeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->introduceskeys(i), target);
  }

  // repeated string isIntroducedByKeys = 14;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->isintroducedbykeys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int publicKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string keyLabel = 1;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateAnchored = 2;
    if (has_dateanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateanchored());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required bytes encrKeyData = 4;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // required bytes verKeyData = 5;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

  }
  // repeated string currentKeyForEmails = 6;
  total_size += 1 * this->currentkeyforemails_size();
  for (int i = 0; i < this->currentkeyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentkeyforemails(i));
  }

  // repeated string keyForEmails = 7;
  total_size += 1 * this->keyforemails_size();
  for (int i = 0; i < this->keyforemails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyforemails(i));
  }

  // repeated string keyForDevicesWithUUID = 8;
  total_size += 1 * this->keyfordeviceswithuuid_size();
  for (int i = 0; i < this->keyfordeviceswithuuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keyfordeviceswithuuid(i));
  }

  // repeated string introducesKeys = 13;
  total_size += 1 * this->introduceskeys_size();
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->introduceskeys(i));
  }

  // repeated string isIntroducedByKeys = 14;
  total_size += 1 * this->isintroducedbykeys_size();
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->isintroducedbykeys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void publicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const publicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const publicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void publicKey::MergeFrom(const publicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentkeyforemails_.MergeFrom(from.currentkeyforemails_);
  keyforemails_.MergeFrom(from.keyforemails_);
  keyfordeviceswithuuid_.MergeFrom(from.keyfordeviceswithuuid_);
  introduceskeys_.MergeFrom(from.introduceskeys_);
  isintroducedbykeys_.MergeFrom(from.isintroducedbykeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_dateanchored()) {
      set_dateanchored(from.dateanchored());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void publicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void publicKey::CopyFrom(const publicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool publicKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void publicKey::Swap(publicKey* other) {
  if (other != this) {
    std::swap(keylabel_, other->keylabel_);
    std::swap(dateanchored_, other->dateanchored_);
    std::swap(version_, other->version_);
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    currentkeyforemails_.Swap(&other->currentkeyforemails_);
    keyforemails_.Swap(&other->keyforemails_);
    keyfordeviceswithuuid_.Swap(&other->keyfordeviceswithuuid_);
    introduceskeys_.Swap(&other->introduceskeys_);
    isintroducedbykeys_.Swap(&other->isintroducedbykeys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata publicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = publicKey_descriptor_;
  metadata.reflection = publicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int keyExpectation::kFromAddressFieldNumber;
const int keyExpectation::kToAddressFieldNumber;
const int keyExpectation::kKeyLabelFieldNumber;
const int keyExpectation::kDateAnchoredFieldNumber;
const int keyExpectation::kVersionFieldNumber;
#endif  // !_MSC_VER

keyExpectation::keyExpectation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void keyExpectation::InitAsDefaultInstance() {
}

keyExpectation::keyExpectation(const keyExpectation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void keyExpectation::SharedCtor() {
  _cached_size_ = 0;
  fromaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateanchored_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

keyExpectation::~keyExpectation() {
  SharedDtor();
}

void keyExpectation::SharedDtor() {
  if (fromaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete fromaddress_;
  }
  if (toaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete toaddress_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void keyExpectation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* keyExpectation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return keyExpectation_descriptor_;
}

const keyExpectation& keyExpectation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

keyExpectation* keyExpectation::default_instance_ = NULL;

keyExpectation* keyExpectation::New() const {
  return new keyExpectation;
}

void keyExpectation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromaddress()) {
      if (fromaddress_ != &::google::protobuf::internal::kEmptyString) {
        fromaddress_->clear();
      }
    }
    if (has_toaddress()) {
      if (toaddress_ != &::google::protobuf::internal::kEmptyString) {
        toaddress_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    dateanchored_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool keyExpectation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fromAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromaddress().data(), this->fromaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toAddress;
        break;
      }

      // optional string toAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toaddress().data(), this->toaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keyLabel;
        break;
      }

      // optional string keyLabel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dateAnchored;
        break;
      }

      // optional int32 dateAnchored = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateanchored_)));
          set_has_dateanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void keyExpectation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fromAddress = 1;
  if (has_fromaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromaddress().data(), this->fromaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fromaddress(), output);
  }

  // optional string toAddress = 2;
  if (has_toaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toaddress().data(), this->toaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->toaddress(), output);
  }

  // optional string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keylabel(), output);
  }

  // optional int32 dateAnchored = 4;
  if (has_dateanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dateanchored(), output);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* keyExpectation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fromAddress = 1;
  if (has_fromaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromaddress().data(), this->fromaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromaddress(), target);
  }

  // optional string toAddress = 2;
  if (has_toaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toaddress().data(), this->toaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toaddress(), target);
  }

  // optional string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keylabel(), target);
  }

  // optional int32 dateAnchored = 4;
  if (has_dateanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dateanchored(), target);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int keyExpectation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fromAddress = 1;
    if (has_fromaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromaddress());
    }

    // optional string toAddress = 2;
    if (has_toaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toaddress());
    }

    // optional string keyLabel = 3;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateAnchored = 4;
    if (has_dateanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateanchored());
    }

    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void keyExpectation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const keyExpectation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const keyExpectation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void keyExpectation::MergeFrom(const keyExpectation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromaddress()) {
      set_fromaddress(from.fromaddress());
    }
    if (from.has_toaddress()) {
      set_toaddress(from.toaddress());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_dateanchored()) {
      set_dateanchored(from.dateanchored());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void keyExpectation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void keyExpectation::CopyFrom(const keyExpectation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keyExpectation::IsInitialized() const {

  return true;
}

void keyExpectation::Swap(keyExpectation* other) {
  if (other != this) {
    std::swap(fromaddress_, other->fromaddress_);
    std::swap(toaddress_, other->toaddress_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(dateanchored_, other->dateanchored_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata keyExpectation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = keyExpectation_descriptor_;
  metadata.reflection = keyExpectation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int backupFile::kPrivKeysFieldNumber;
const int backupFile::kPubKeysFieldNumber;
const int backupFile::kVersionFieldNumber;
const int backupFile::kKeyExpectationsFieldNumber;
#endif  // !_MSC_VER

backupFile::backupFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void backupFile::InitAsDefaultInstance() {
}

backupFile::backupFile(const backupFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void backupFile::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

backupFile::~backupFile() {
  SharedDtor();
}

void backupFile::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void backupFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* backupFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return backupFile_descriptor_;
}

const backupFile& backupFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backupData_2eproto();
  return *default_instance_;
}

backupFile* backupFile::default_instance_ = NULL;

backupFile* backupFile::New() const {
  return new backupFile;
}

void backupFile::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  privkeys_.Clear();
  pubkeys_.Clear();
  keyexpectations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool backupFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mynigma.privateKey privKeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_privKeys;
        if (input->ExpectTag(18)) goto parse_pubKeys;
        break;
      }

      // repeated .mynigma.publicKey pubKeys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pubkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pubKeys;
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyExpectations;
        break;
      }

      // repeated .mynigma.keyExpectation keyExpectations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyExpectations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyexpectations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keyExpectations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void backupFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mynigma.privateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->privkeys(i), output);
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pubkeys(i), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // repeated .mynigma.keyExpectation keyExpectations = 4;
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->keyexpectations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* backupFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mynigma.privateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->privkeys(i), target);
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pubkeys(i), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // repeated .mynigma.keyExpectation keyExpectations = 4;
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->keyexpectations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int backupFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated .mynigma.privateKey privKeys = 1;
  total_size += 1 * this->privkeys_size();
  for (int i = 0; i < this->privkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privkeys(i));
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  total_size += 1 * this->pubkeys_size();
  for (int i = 0; i < this->pubkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pubkeys(i));
  }

  // repeated .mynigma.keyExpectation keyExpectations = 4;
  total_size += 1 * this->keyexpectations_size();
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyexpectations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void backupFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const backupFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const backupFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void backupFile::MergeFrom(const backupFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  privkeys_.MergeFrom(from.privkeys_);
  pubkeys_.MergeFrom(from.pubkeys_);
  keyexpectations_.MergeFrom(from.keyexpectations_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void backupFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void backupFile::CopyFrom(const backupFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool backupFile::IsInitialized() const {

  for (int i = 0; i < privkeys_size(); i++) {
    if (!this->privkeys(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pubkeys_size(); i++) {
    if (!this->pubkeys(i).IsInitialized()) return false;
  }
  return true;
}

void backupFile::Swap(backupFile* other) {
  if (other != this) {
    privkeys_.Swap(&other->privkeys_);
    pubkeys_.Swap(&other->pubkeys_);
    std::swap(version_, other->version_);
    keyexpectations_.Swap(&other->keyexpectations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata backupFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = backupFile_descriptor_;
  metadata.reflection = backupFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mynigma

// @@protoc_insertion_point(global_scope)
